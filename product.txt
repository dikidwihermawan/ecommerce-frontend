import React, { useEffect, useState } from 'react';
import { IconShoppingCart } from '@tabler/icons-react';

export default function Cart() {
    const [products, setProducts] = useState([]);
    const [qtys, setQtys] = useState([]);
    const [addCart, setAddCart] = useState([]);
    const [showCart, setShowCart] = useState('hidden');

    const getDataProduct = async () => {
        const response = await fetch('https://fakestoreapi.com/products');
        const myData = await response.json();
        const product = myData.slice();

        const addQty = product.map((p) => {
            return {
                ...p,
                quantity: 10,
                order_quantity: 0,
            };
        });
        setProducts(addQty);
    };

    useEffect(() => {
        getDataProduct();
    }, []);

    function handleAddQty(id) {
        const searchProduct = products.map((product) => {
            if (product.id === id && product.quantity != 0) {
                return {
                    ...product,
                    quantity: (product.quantity -= 1),
                    order_quantity: product.order_quantity++,
                };
            }

            return product;
        });

        setQtys(searchProduct);
    }
    function handleRmvQty(id) {
        const searchProduct = products.map((product) => {
            if (product.id === id && product.order_quantity != 0) {
                return {
                    ...product,
                    quantity: (product.quantity += 1),
                    order_quantity: product.order_quantity--,
                };
            }
            return product;
        });

        setQtys(searchProduct);
    }
    const handleShowCart = async () => {
        setShowCart(showCart == 'hidden' ? '' : 'hidden');
    };

    const handleAddCart = async (id) => {
        // console.log("id = " + id + ", order = " + order);
        // console.log(addCart);
        products.find((product) => {
            if (product.id === id) {
                setAddCart((e) => [
                    ...e,
                    {
                        cart_id: Math.floor(Math.random(12) * Date.now()),
                        id: product.id,
                        image: product.image,
                        title: product.title,
                        qty: product.order_quantity,
                        price: product.price,
                    },
                ]);
            }
        });

        // products.find((product) => {
        //     if (product.id === id) {
        //         setAddCart((e) => [
        //             ...e,
        //             {
        //                 cart_id: Math.floor(Math.random(12) * Date.now()),
        //                 image: product.image,
        //                 title: product.title,
        //                 qty: product.order_quantity,
        //                 price: product.price,
        //             },
        //         ]);
        //     }
        // });
    };

    return (
        <div className='grid place-content-center min-h-screen'>
            <div className='shadow-lg'>
                {/* <h1 className='text-center text-xl py-4'>Labomba Store</h1> */}
                {products.length > 0 ? (
                    <ol className='grid gap-x-8 gap-y-4 grid-cols-3'>
                        {products.map((product) => (
                            <li key={product.id}>
                                <div className='w-80 h-100 py-4 rounded overflow-hidden shadow-lg'>
                                    <img className='w-24 h-32 mx-auto' src={product.image} alt={product.category} />
                                    <div className='px-6 py-4'>
                                        <div className='font-bold text-sm mb-2 h-16'>{product.title}</div>
                                        <div className='text-gray-700 text-xs h-16'>{product.description.length < 200 ? product.description : product.description.substring(0, 200) + ' ...'}</div>
                                    </div>
                                    <div className='flex items-center justify-between'>
                                        <div className='text-xs px-6 py-4 text-end text-green-600'>$ {product.price}</div>
                                        <div className='text-xs px-6 py-4 text-end'>{product.quantity} Item left</div>
                                    </div>
                                    <div className='px-6 pb-4 flex items-center justify-between'>
                                        <div className='flex items-center space-x-4'>
                                            <button onClick={(e) => handleAddQty(product.id)} className='border bg-slate-100 shadow-2xl px-4 py-1 rounded text-xs'>
                                                +
                                            </button>
                                            <span className='text-xs'>{product.order_quantity}</span>
                                            <button onClick={(e) => handleRmvQty(product.id)} className='border bg-slate-100 shadow-2xl px-4 py-1 rounded text-xs'>
                                                -
                                            </button>
                                        </div>
                                        <button onClick={() => handleAddCart(product.id)} className='flex items-center space-x-2 border bg-slate-100 shadow-2xl px-4 py-1 rounded text-xs'>
                                            <IconShoppingCart className='stroke-1 h-5 w-5' /> Add to cart
                                        </button>
                                    </div>

                                    <div className='px-6 pt-4 pb-2'>
                                        <span className='inline-block bg-gray-200 rounded-full px-3 py-1 text-xs font-semibold text-gray-700 mr-2 mb-2'>{product.category}</span>
                                    </div>
                                </div>
                            </li>
                        ))}
                    </ol>
                ) : null}
                <div className='flex items-center gap-x-4'>
                    <div className={`${showCart} fixed z-90 bottom-8 right-20 overflow-auto bg-white h-96 scale-100 border border-grey-300 shadow rounded-md p-4 max-w-sm w-full mx-auto`}>
                        {addCart.length > 0 ? (
                            <ul className='space-y-6'>
                                {addCart.map((cart) => (
                                    <li key={cart.cart_id} className='flex space-x-4'>
                                        <img className='rounded-full bg-slate-200 h-10 w-10' src={cart.image} alt={cart.title} />
                                        <div className='flex-1 space-y-6 py-1'>
                                            <div className='h-6 text-sm rounded'>{cart.title}</div>
                                            <div className='space-y-6'>
                                                <div className='flex items-center justify-between'>
                                                    <div className='h-6 text-xs col-span-2'>
                                                        $ {cart.price} x {cart.qty} = $ ({cart.price * cart.qty})
                                                    </div>
                                                    <button className='col-span-1 px-2 py-1 bg-red-600 text-white rounded-full text-xs'>x</button>
                                                </div>
                                            </div>
                                        </div>
                                    </li>
                                ))}
                            </ul>
                        ) : (
                            'Belum ada cart'
                        )}
                    </div>

                    <button
                        onClick={handleShowCart}
                        title='Carts'
                        className='fixed z-90 bottom-8 right-8 bg-green-600 rounded-full w-12 h-12 drop-shadow-lg flex justify-center items-center text-white text-4xl hover:bg-blue-700 hover:drop-shadow-2xl'>
                        <IconShoppingCart />
                    </button>
                </div>
            </div>
        </div>
    );
}
