import axios, { Axios } from 'axios';
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { IconShoppingCart } from '@tabler/icons-react';
import ReactDOM from 'react-dom';

export default function App() {
    const [products, setProducts] = useState([]);
    const [qtys, setQtys] = useState([]);
    const [addCart, setAddCart] = useState([]);
    const [showCart, setShowCart] = useState('hidden');

    const getDataProduct = async () => {
        const response = await fetch('https://fakestoreapi.com/products');
        const myData = await response.json();
        const product = myData.slice();

        const addQty = product.map((p) => {
            return {
                ...p,
                quantity: 10,
                order_quantity: 0,
            };
        });
        setProducts(addQty);
    };

    useEffect(() => {
        getDataProduct();
    }, []);

    function handleAddQty(id) {
        const searchProduct = products.map((product) => {
            if (product.id === id && product.quantity != 0) {
                return {
                    ...product,
                    quantity: (product.quantity -= 1),
                    order_quantity: product.order_quantity++,
                };
            }

            return product;
        });

        setQtys(searchProduct);
    }
    function handleRmvQty(id) {
        const searchProduct = products.map((product) => {
            if (product.id === id && product.order_quantity != 0) {
                return {
                    ...product,
                    quantity: (product.quantity += 1),
                    order_quantity: product.order_quantity--,
                };
            }
            return product;
        });

        setQtys(searchProduct);
    }
    const handleShowCart = async () => {
        setShowCart(showCart == 'hidden' ? '' : 'hidden');
    };

    const handleAddCart = async (id) => {
        // console.log("id = " + id + ", order = " + order);
        // console.log(addCart);
        products.find((product) => {
            if (product.id === id) {
                setAddCart((e) => [
                    ...e,
                    {
                        cart_id: Math.floor(Math.random(12) * Date.now()),
                        id: product.id,
                        image: product.image,
                        title: product.title,
                        qty: product.order_quantity,
                        price: product.price,
                    },
                ]);
            }
        });

        // products.find((product) => {
        //     if (product.id === id) {
        //         setAddCart((e) => [
        //             ...e,
        //             {
        //                 cart_id: Math.floor(Math.random(12) * Date.now()),
        //                 image: product.image,
        //                 title: product.title,
        //                 qty: product.order_quantity,
        //                 price: product.price,
        //             },
        //         ]);
        //     }
        // });
    };

    return (
        <div className='grid place-content-center min-h-screen'>
            <h1 className='text-center text-xl py-4'>Labomba Store</h1>
            {products.length > 0 ? (
                <ol className='grid gap-x-8 gap-y-4 grid-cols-3'>
                    {products.map((product) => (
                        <li key={product.id}>
                            <div className='w-80 h-100 py-4 rounded overflow-hidden shadow-lg'>
                                <img className='w-24 h-32 mx-auto' src={product.image} alt={product.category} />
                                <div className='px-6 py-4'>
                                    <div className='font-bold text-sm mb-2 h-16'>{product.title}</div>
                                    <div className='text-gray-700 text-xs h-16'>{product.description.length < 200 ? product.description : product.description.substring(0, 200) + ' ...'}</div>
                                </div>
                                <div className='flex items-center justify-between'>
                                    <div className='text-xs px-6 py-4 text-end text-green-600'>$ {product.price}</div>
                                    <div className='text-xs px-6 py-4 text-end'>{product.quantity} Item left</div>
                                </div>
                                <div className='px-6 pb-4 flex items-center justify-between'>
                                    <div className='flex items-center space-x-4'>
                                        <button onClick={(e) => handleAddQty(product.id)} className='border bg-slate-100 shadow-2xl px-4 py-1 rounded text-xs'>
                                            +
                                        </button>
                                        <span className='text-xs'>{product.order_quantity}</span>
                                        <button onClick={(e) => handleRmvQty(product.id)} className='border bg-slate-100 shadow-2xl px-4 py-1 rounded text-xs'>
                                            -
                                        </button>
                                    </div>
                                    <button onClick={() => handleAddCart(product.id)} className='flex items-center space-x-2 border bg-slate-100 shadow-2xl px-4 py-1 rounded text-xs'>
                                        <IconShoppingCart className='stroke-1 h-5 w-5' /> Add to cart
                                    </button>
                                </div>

                                <div className='px-6 pt-4 pb-2'>
                                    <span className='inline-block bg-gray-200 rounded-full px-3 py-1 text-xs font-semibold text-gray-700 mr-2 mb-2'>{product.category}</span>
                                </div>
                            </div>
                        </li>
                    ))}
                </ol>
            ) : null}
            <div className='flex items-center gap-x-4'>
                <div className={`${showCart} fixed z-90 bottom-8 right-20 overflow-auto bg-white h-96 scale-100 border border-grey-300 shadow rounded-md p-4 max-w-sm w-full mx-auto`}>
                    {addCart.length > 0 ? (
                        <ul className='space-y-6'>
                            {addCart.map((cart) => (
                                <li key={cart.cart_id} className='flex space-x-4'>
                                    <img className='rounded-full bg-slate-200 h-10 w-10' src={cart.image} alt={cart.title} />
                                    <div className='flex-1 space-y-6 py-1'>
                                        <div className='h-6 text-sm rounded'>{cart.title}</div>
                                        <div className='space-y-6'>
                                            <div className='flex items-center justify-between'>
                                                <div className='h-6 text-xs col-span-2'>
                                                    $ {cart.price} x {cart.qty} = $ ({cart.price * cart.qty})
                                                </div>
                                                <button className='col-span-1 px-2 py-1 bg-red-600 text-white rounded-full text-xs'>x</button>
                                            </div>
                                        </div>
                                    </div>
                                </li>
                            ))}
                        </ul>
                    ) : (
                        'Belum ada cart'
                    )}
                </div>

                <button onClick={handleShowCart} title='Carts' className='fixed z-90 bottom-8 right-8 bg-green-600 rounded-full w-12 h-12 drop-shadow-lg flex justify-center items-center text-white text-4xl hover:bg-blue-700 hover:drop-shadow-2xl'>
                    <IconShoppingCart />
                </button>
            </div>
        </div>
    );
}

// export default function App() {
//     const baseURL = "https://jsonplaceholder.typicode.com/users";

//     const [user, setUser] = useState([]);
//     const [editUser, setEditUser] = useState(true);

//     useEffect(() => {
//         axios.get(baseURL).then((response) => {
//             setUser(response.data);
//         });
//     }, []);

//     function handleClickEdit(id) {
//         setUser.map((data) => {
//             console.log(data);
//         });
//         setEditUser((x) => !x);
//         console.log(editUser);
//     }

//     // function editUser(id) {
//     //     axios
//     //         .put(baseURL + "/" + id, {
//     //             name: "Diki Dwi Hermawan",
//     //             username: "DikiDH",
//     //         })
//     //         .then((response) => {
//     //             setUser(response.data);
//     //         });
//     // }

//     return (
//         <div className="grid place-content-center min-h-screen">
//             <ol className="space-y-4">
//                 {user.map((u) => (
//                     <li key={u.id} className="flex items-center justify-between">
//                         <span>
//                             {u.name} ({u.username})
//                         </span>
//                         <button key={u.id} onClick={() => handleClickEdit(u.id)} className="rounded px-2 py-1 text-xs bg-black text-white">
//                             {editUser ? "Edit" : "Close"}
//                         </button>
//                     </li>
//                 ))}
//             </ol>
//         </div>
//     );
// }

// export default function App() {
//     const [task, setTask] = useState("");
//     const [tasks, setTasks] = useState([]);

//     const inputRef = useRef();
//     useEffect((e) => {
//         setTimeout(() => {
//             inputRef.current.focus();
//             console.log("ready");
//         }, 2000);
//     }, []);

//     function handleAddTask(e) {
//         setTasks((prevTask) => [
//             ...prevTask,
//             {
//                 id: Math.floor(Math.random(6) + Date.now()),
//                 name: task,
//                 completed: false,
//             },
//         ]);
//         setTask("");
//     }

//     function handleCompletedTask(id) {
//         const updateTask = tasks.map((task) => {
//             if (id === task.id) {
//                 return {
//                     ...task,
//                     completed: !task.completed,
//                 };
//             }
//             return task;
//         });

//         setTasks(updateTask);
//     }
//     function handleRemoveTask(id) {
//         const removeTask = tasks.filter((task) => task.id !== id);
//         setTasks(removeTask);
//     }

//     return (
//         <div className="grid place-content-center min-h-screen">
//             <div className="flex items-center gap-x-2">
//                 <input
//                     ref={inputRef}
//                     value={task}
//                     onChange={(e) => setTask(e.target.value)}
//                     type="text"
//                     className="transition duration-300 border rounded focus:outline-none focus:ring focus:ring-blue-400 focus:border-blue-600 px-4 py-2"
//                 />
//                 <button className="px-4 py-2 bg-black text-white rounded" onClick={handleAddTask}>
//                     Add Task
//                 </button>
//             </div>
//             <div className="py-4">
//                 <span>You have {tasks.length} Tasks</span>
//             </div>

//             {tasks.length > 0 ? (
//                 <ol className="space-y-4">
//                     {tasks.map((task) => (
//                         <li key={task.id} className="flex items-center justify-between">
//                             <span>
//                                 {task.name} {task.completed ? "Completed" : "Incompleted"}
//                             </span>
//                             <div className="flex items-center gap-x-2">
//                                 <button className="px-2 py-1 rounded bg-slate-100" onClick={() => handleCompletedTask(task.id)}>
//                                     {task.completed ? "Incompleted" : "Completed"}
//                                 </button>
//                                 <button className="px-2 py-1 rounded bg-slate-100" onClick={() => handleRemoveTask(task.id)}>
//                                     Remove
//                                 </button>
//                             </div>
//                         </li>
//                     ))}
//                 </ol>
//             ) : null}
//         </div>
//     );
// }

// import "./styles.css";

// export default function App() {
//     // State with list of all checked item
//     const [checked, setChecked] = useState([]);
//     const checkList = ["Apple", "Banana", "Tea", "Coffee"];

//     // Add/Remove checked item from list
//     const handleCheck = (event) => {
//         var updatedList = [...checked];
//         if (event.target.checked) {
//             updatedList = [...checked, event.target.value];
//         } else {
//             updatedList.splice(checked.indexOf(event.target.value), 1);
//         }
//         setChecked(updatedList);
//     };

//     // Generate string of checked items
//     const checkedItems = checked.length
//         ? checked.reduce((total, item) => {
//               return total + ", " + item;
//           })
//         : "";

//     // Return classes based on whether item is checked
//     var isChecked = (item) => (checked.includes(item) ? "checked-item" : "not-checked-item");
//     console.log(isChecked);

//     return (
//         <div className="app">
//             <div className="checkList">
//                 <div className="title">Your CheckList:</div>
//                 <div className="list-container">
//                     {checkList.map((item, index) => (
//                         <div key={index}>
//                             <input value={item} type="checkbox" onChange={handleCheck} />
//                             <span className={isChecked(item)}>{item}</span>
//                         </div>
//                     ))}
//                 </div>
//             </div>

//             <div>{`Items checked are: ${checkedItems}`}</div>
//         </div>
//     );
// }

// import { useState } from "react";

// export default function App() {
//     const [name, setName] = useState("...");
//     const [password, setPassword] = useState("Weak");
//     const [change, setChange] = useState("text-red-600");
//     const [maxChar, setChar] = useState(20);

//     const handleName = (event) => {
//         // 👇 Get input value from "event"
//         setName(event.target.value);
//     };
//     const handlePassword = (event) => {
//         // 👇 Get input value from "event"
//         let a = event.target.value.length;
//         setChar(20 - a);
//         if (a < 6) {
//             setPassword("Weak");
//             setChange("text-red-600");
//         } else if (a >= 6 && a <= 12) {
//             setPassword("Good");
//             setChange("text-sky-600");
//         } else if (a > 12) {
//             setPassword("Strong");
//             setChange("text-green-600");
//         }
//     };

//     return (
//         <div className="grid place-content-center min-h-screen">
//             <div className="w-96 bg-white shadow rounded p-4">
//                 <div className="py-2">
//                     <label htmlFor="username">Username</label>
//                     <input
//                         onChange={handleName}
//                         type="text"
//                         name="username"
//                         id="username"
//                         className="w-full p-2 rounded-xl border focus:outline-none focus:ring-1 ring-blue-600 transition duration-700"
//                     />
//                     <p className="text-sm pt-2">Our username : {name}</p>
//                 </div>
//                 <div className="py-2">
//                     <label htmlFor="password">Password</label>
//                     <input
//                         maxLength={20}
//                         onChange={handlePassword}
//                         type="password"
//                         name="password"
//                         id="password"
//                         className="w-full p-2 rounded-xl border focus:outline-none focus:ring-1 ring-blue-600 transition duration-700"
//                     />
//                     <div className="flex justify-between">
//                         <p className={`${change} text-sm pt-2`}>Our password : {password}</p>
//                         <p className={`text-xs antialiased tracking-tight pt-2`}>Character remaining : {maxChar}</p>
//                     </div>
//                 </div>
//                 <div className="py-2 flex justify-end">
//                     <button className="px-4 py-2 text-white rounded-xl bg-blue-600 focus:outline-none focus:ring hover:bg-pink-600">Sign in</button>
//                 </div>
//             </div>
//         </div>
//     );
// }
